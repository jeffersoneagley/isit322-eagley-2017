#!/usr/bin/env node
const express = require('express');
const http = require('http');
const url = require('url');
const WebSocket = require('ws');
const serverMicroServiceName = require('../package.json').name;
let app = require('../app')(ApiEventCallbackForSocket);

const MicroServiceAddressesUtility = require('../../../config/microserviceAddresses.json')[serverMicroServiceName];

const server = http.createServer(app);
const wss = new WebSocket.Server({server});

function ApiEventCallbackForSocket(ApiEventData) {
    //get our data object and send it to all our socket clients
    wss.clients.forEach(function(client) {
        client.send('API->' + (ApiEventData.apiUrl || ' some API ') + ' was called as a ' +
            (ApiEventData.method || ' some method ') +
            ' request by ' + (ApiEventData.ip || ' anonymous-www '));
    });
};

wss.on('connection', function connection(ws) {
    ws.on('message', function incoming(message) {
        console.log('received: %s', message);
    });

    ws.send('welcome, you are now subscribed to the gist edit api event notifier');
});

server.listen(MicroServiceAddressesUtility.port, onListening());

function onListening() {
    console.log('Listening on %d', server.address());
}

/**
 * Event listener for HTTP server "error" event.
 */

// function onError(error) {
//     if (error.syscall !== 'listen') {
//         throw error;
//     }
//
//     let bind = typeof port === 'string'
//         ? 'Pipe ' + port
//         : 'Port ' + port;
//
//     // handle specific listen errors with friendly messages
//     switch (error.code) {
//         case 'EACCES':
//             console.error(bind + ' requires elevated privileges');
//             process.exit(1);
//             break;
//         case 'EADDRINUSE':
//             console.error(bind + ' is already in use');
//             process.exit(1);
//             break;
//         default:
//             throw error;
//     }
// }
//
// /**
//  * Event listener for HTTP server "listening" event.
//  */
//
// function onListening() {
//     let addr = server.address();
//     let bind = typeof addr === 'string'
//         ? 'pipe ' + addr
//         : 'port ' + addr.port;
//     debug('Listening on ' + bind);
// }
