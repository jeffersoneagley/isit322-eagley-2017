import React from 'react';
// import Paragraph from "../src/components/paragraph";
import GitFieldGenerator from '../../src/components/GitGood/GitFieldGenerator';
import fieldDefMocks from '../../__mocks__/mock-field-definitions';

describe('Test suite GitFieldGenerator', () => {
        let fieldDefinitions = [];
        let gitUser = {};

        /*
         reverse create the gituser that would be generated by a
         successful run of the fieldGenerator
         */
        function gitUserInit() {
            const tempGitUser = {};
            for (let value in fieldDefMocks) {
                let field = fieldDefMocks[value];
                tempGitUser[field.id] = field.sample;
            }
            return tempGitUser;
        };

        beforeEach(() => {
            fieldDefinitions = fieldDefMocks;
            gitUser = gitUserInit();
        });

        function runTestCycleOnValue(mockedField, valuePart) {
            it('Generates field.' + valuePart + ' for ' + mockedField.id +
                ' with the value ' + mockedField[valuePart],
                () => {
                    let myFieldGenerator = new GitFieldGenerator();

                    let generatedFieldDefinitions =
                            myFieldGenerator.getFields(gitUser);
                    let result = generatedFieldDefinitions.find((w) => {
                        return w.id === mockedField.id;
                    });
                    // console.log(result);
                    expect(result && result[valuePart] === mockedField[valuePart]).
                        toEqual(true);
                });
        }

        function runAllTestsOnGitUserFields() {
            for (let field in fieldDefMocks) {
                for (let valuePart in fieldDefMocks[field]) {
                    runTestCycleOnValue(
                        fieldDefMocks[field],
                        valuePart,
                    );
                }
            }
        }

        runAllTestsOnGitUserFields();
    },
)
;
